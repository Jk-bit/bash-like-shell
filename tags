!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
NO_OF_ARG	defs.h	12;"	d
PATHS	defs.h	11;"	d
SHMSZ	Signal/shm/one.c	7;"	d	file:
SHMSZ	Signal/shm/two.c	10;"	d	file:
WORD_SIZE	defs.h	13;"	d
backgroundproc	defs.h	/^bool backgroundproc = 0;$/;"	v
bg_proc	defs.h	/^bool bg_proc = 0;$/;"	v
clean_string	shell.c	/^char *clean_string(char *string){$/;"	f
fg_proc	defs.h	/^bool fg_proc = 0;$/;"	v
fork_ret	defs.h	/^int fork_ret;$/;"	v
handle_sigint	Signal/signals/try2.c	/^void handle_sigint(int sig) $/;"	f
handler	shell.c	/^void handler(int x){$/;"	f
int_handler	shell.c	/^void int_handler(int x){$/;"	f
inthandler	Signal/signals/handleint.c	/^void inthandler(int x) {$/;"	f
inthandler	Signal/signals/try.c	/^void inthandler(int x){$/;"	f
isbackgroundproc	shell.c	/^bool isbackgroundproc(char **str){$/;"	f
ischildprocess	defs.h	/^bool ischildprocess = 0;$/;"	v
isfgbg	shell.c	/^int isfgbg(char *try){$/;"	f
job_no	linked_list.h	/^    int job_no;$/;"	m	struct:node
linked_list	linked_list.h	/^typedef node* linked_list;$/;"	t
llist_init	linked_list.c	/^void llist_init(linked_list *head){$/;"	f
llist_insert	linked_list.c	/^int llist_insert(linked_list *head, pid_t pid){$/;"	f
llist_remove	linked_list.c	/^pid_t llist_remove(linked_list *head, int job_no, int pid){$/;"	f
main	Signal/mkfifo/mkfifo.c	/^int main(int argc, char *argv[]) {$/;"	f
main	Signal/mkfifo/mkfifo2.c	/^int main(int argc, char *argv[]) {$/;"	f
main	Signal/shm/mmap.c	/^int main(int argc, char *argv[]) {$/;"	f
main	Signal/shm/one.c	/^int main()$/;"	f
main	Signal/shm/shm-posix-consumer.c	/^int main()$/;"	f
main	Signal/shm/shm-posix-producer.c	/^int main()$/;"	f
main	Signal/shm/two.c	/^int main()$/;"	f
main	Signal/signals/handleint.c	/^int main() {$/;"	f
main	Signal/signals/handlesegv.c	/^int main() {$/;"	f
main	Signal/signals/kill.c	/^int main(int argc, char *argv[]) {$/;"	f
main	Signal/signals/try.c	/^int main(){$/;"	f
main	Signal/signals/try2.c	/^int main() $/;"	f
main	shell.c	/^int main(){$/;"	f
main	trial.c	/^int main(int argc, char *argv[]){$/;"	f
main	while1.c	/^int main(){$/;"	f
next	linked_list.h	/^    struct node *next;  $/;"	m	struct:node	typeref:struct:node::node
node	linked_list.h	/^typedef struct node{$/;"	s
node	linked_list.h	/^}node;$/;"	t	typeref:struct:node
parse	shell.c	/^char **parse(char **try, int size_of_comm){$/;"	f
pid	linked_list.h	/^    pid_t pid;  $/;"	m	struct:node
pipe_handling	shell.c	/^void pipe_handling(char **try, int size_of_comm){$/;"	f
redirect_handling	shell.c	/^void redirect_handling(char **try, int size_of_comm){$/;"	f
seghandler	Signal/signals/handlesegv.c	/^void seghandler(int x) {$/;"	f
signal_child	shell.c	/^void signal_child(){$/;"	f
signal_init	shell.c	/^void signal_init(){$/;"	f
stopped_jobs	defs.h	/^linked_list stopped_jobs;$/;"	v
stopped_jobs_counter	defs.h	/^int stopped_jobs_counter = 0;$/;"	v
stp_handler	shell.c	/^void stp_handler(int x){$/;"	f
stp_handler	while1.c	/^void stp_handler(int x){$/;"	f
